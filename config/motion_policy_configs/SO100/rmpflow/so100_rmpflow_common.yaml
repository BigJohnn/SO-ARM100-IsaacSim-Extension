# Copyright (c) 2019-2022, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# Artificially limit the robot joints.  For example:
# A joint with range +-pi would be limited to +-(pi-.01)
api_version: 1.0

joint_limit_buffers: [.01, .01, .01, .01, .01]

rmp_params:
    cspace_target_rmp:
        metric_scalar: 10.
        position_gain: 50.
        damping_gain: 50.
        robust_position_term_thresh: .5
        inertia: 1.
    cspace_trajectory_rmp:
        p_gain: 80.
        d_gain: 10.
        ff_gain: .25
        weight: 50.
    cspace_affine_rmp:
        final_handover_time_std_dev: .25
        weight: 1.
    joint_limit_rmp:
        metric_scalar: 50.
        metric_length_scale: .1
        metric_exploder_eps: 1e-3
        metric_velocity_gate_length_scale: .01
        accel_damper_gain: 200.
        accel_potential_gain: 10.
        accel_potential_exploder_length_scale: .1
        accel_potential_exploder_eps: 1e-2
    joint_velocity_cap_rmp:
        max_velocity: 2.15
        velocity_damping_region: 0.5
        damping_gain: 300.
        metric_weight: 0.1
    target_rmp:
        accel_p_gain: 100.
        accel_d_gain: 50.
        accel_norm_eps: .075
        metric_alpha_length_scale: .05 #.05
        min_metric_alpha: .01 #.01
        max_metric_scalar: 1000 #5000.
        min_metric_scalar: 10 #1000.
        proximity_metric_boost_scalar: 20.
        proximity_metric_boost_length_scale: .2 #.02
        accept_user_weights: false
    axis_target_rmp:
        accel_p_gain: 50.
        accel_d_gain: 10.
        metric_scalar: 0 #10.
        proximity_metric_boost_scalar: 1000.
        proximity_metric_boost_length_scale: .05
        accept_user_weights: false
    collision_rmp:
        damping_gain: 5.
        damping_std_dev: .04
        damping_robustness_eps: 1e-2
        damping_velocity_gate_length_scale: .01
        repulsion_gain: 1200.
        repulsion_std_dev: .01
        metric_modulation_radius: .5
        metric_scalar: 1000 #1000.
        metric_exploder_std_dev: .02
        metric_exploder_eps: .001
    damping_rmp:
        accel_d_gain: 30.
        metric_scalar: 1.
        inertia: 100.

canonical_resolve:
    max_acceleration_norm: 50.
    projection_tolerance: .01
    verbose: false

# body_cylinders are used to promote self-collision avoidance between the robot and its base
# The example below defines the robot base to be a capsule defined by the absolute coordinates pt1 and pt2.
# The semantic name provided for each body_cylinder does not need to be present in the robot URDF.

body_cylinders:
  - name: base_link
    pt1: [0, 0, 0.22]
    pt2: [0, 0, 0]
    radius: .09

# body_collision_controllers defines spheres located at specified frames in the robot URDF
# These spheres will not be allowed to collide with the capsules enumerated under body_cylinders
# By design, most frames in industrial robots are kinematically unable to collide with the robot base.
# It is often only necessary to define body_collision_controllers near the end effector
body_collision_controllers:
  - name: Fixed_Jaw
    radius: 0.02
  - name: Moving_Jaw
    radius: 0.02

